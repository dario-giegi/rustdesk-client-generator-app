name: Build Custom RustDesk Client

on:
  workflow_dispatch:
    inputs:
      config_json:
        description: 'Configuración JSON del cliente personalizado'
        required: true
        type: string
      executable_name:
        description: 'Nombre del ejecutable'
        required: true
        default: 'rustdesk-custom'
        type: string
      version:
        description: 'Versión del cliente'
        required: true
        default: '1.0.0'
        type: string
      rustdesk_branch:
        description: 'Rama de RustDesk'
        required: false
        default: 'master'
        type: choice
        options:
          - master
          - dev
          - 1.2.6
          - 1.2.5
          - 1.2.4
      target_arch:
        description: 'Arquitectura objetivo'
        required: false
        default: 'x86_64'
        type: choice
        options:
          - x86_64
          - x86
          - aarch64
      enable_portable:
        description: 'Habilitar modo portable'
        required: false
        default: false
        type: boolean
      include_installer:
        description: 'Incluir instalador MSI'
        required: false
        default: false
        type: boolean
      enable_debug:
        description: 'Compilar en modo debug'
        required: false
        default: false
        type: boolean
      sign_executable:
        description: 'Firmar ejecutable'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: ${{ github.event.inputs.target_arch }}-pc-windows-msvc
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: |
        # Instalar dependencias de Windows
        choco install nasm -y
        choco install llvm -y
        
        # Instalar vcpkg para dependencias C++
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg.exe install libvpx:x64-windows-static opus:x64-windows-static aom:x64-windows-static
        
    - name: Clone RustDesk
      run: |
        git clone --depth 1 --branch ${{ github.event.inputs.rustdesk_branch }} https://github.com/rustdesk/rustdesk.git rustdesk-source
        
    - name: Prepare Configuration
      shell: pwsh
      run: |
        # Crear archivo de configuración temporal
        $config = '${{ github.event.inputs.config_json }}'
        $config | Out-File -FilePath "config.json" -Encoding UTF8
        
        # Mostrar configuración (sin datos sensibles)
        Write-Host "=== Configuración del Build ==="
        Write-Host "Ejecutable: ${{ github.event.inputs.executable_name }}"
        Write-Host "Versión: ${{ github.event.inputs.version }}"
        Write-Host "Rama RustDesk: ${{ github.event.inputs.rustdesk_branch }}"
        Write-Host "Arquitectura: ${{ github.event.inputs.target_arch }}"
        Write-Host "Modo Portable: ${{ github.event.inputs.enable_portable }}"
        Write-Host "Incluir Instalador: ${{ github.event.inputs.include_installer }}"
        Write-Host "Modo Debug: ${{ github.event.inputs.enable_debug }}"
        Write-Host "Firmar Ejecutable: ${{ github.event.inputs.sign_executable }}"
        
    - name: Apply Custom Configuration
      shell: pwsh
      run: |
        # Ejecutar script de aplicación de configuración
        .\scripts\apply-config.ps1 -ConfigPath "config.json" -RustDeskPath "rustdesk-source" -Verbose
        
    - name: Setup Build Environment
      shell: pwsh
      run: |
        # Configurar variables de entorno para el build
        $env:VCPKG_ROOT = "$PWD\vcpkg"
        $env:LIBCLANG_PATH = "C:\Program Files\LLVM\bin"
        
        # Configurar Cargo para el target específico
        if ("${{ github.event.inputs.target_arch }}" -eq "x86") {
          $env:CARGO_TARGET = "i686-pc-windows-msvc"
        } elseif ("${{ github.event.inputs.target_arch }}" -eq "aarch64") {
          $env:CARGO_TARGET = "aarch64-pc-windows-msvc"
        } else {
          $env:CARGO_TARGET = "x86_64-pc-windows-msvc"
        }
        
        echo "VCPKG_ROOT=$env:VCPKG_ROOT" >> $env:GITHUB_ENV
        echo "LIBCLANG_PATH=$env:LIBCLANG_PATH" >> $env:GITHUB_ENV
        echo "CARGO_TARGET=$env:CARGO_TARGET" >> $env:GITHUB_ENV
        
    - name: Cache Cargo Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          rustdesk-source/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('rustdesk-source/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build RustDesk Client
      shell: pwsh
      working-directory: rustdesk-source
      run: |
        # Configurar modo de compilación
        $buildMode = if ("${{ github.event.inputs.enable_debug }}" -eq "true") { "" } else { "--release" }
        $targetFlag = "--target $env:CARGO_TARGET"
        
        Write-Host "=== Iniciando compilación ==="
        Write-Host "Modo: $(if ($buildMode) { 'Release' } else { 'Debug' })"
        Write-Host "Target: $env:CARGO_TARGET"
        
        # Compilar el cliente
        cargo build $buildMode $targetFlag --bin rustdesk
        
        # Verificar que el ejecutable se creó correctamente
        $buildDir = if ($buildMode) { "release" } else { "debug" }
        $exePath = "target\$env:CARGO_TARGET\$buildDir\rustdesk.exe"
        
        if (Test-Path $exePath) {
          Write-Host "✅ Compilación exitosa: $exePath"
          
          # Renombrar ejecutable si se especificó un nombre personalizado
          if ("${{ github.event.inputs.executable_name }}" -ne "rustdesk") {
            $newName = "${{ github.event.inputs.executable_name }}.exe"
            $newPath = "target\$env:CARGO_TARGET\$buildDir\$newName"
            Move-Item $exePath $newPath
            Write-Host "✅ Ejecutable renombrado a: $newName"
            echo "EXECUTABLE_PATH=$newPath" >> $env:GITHUB_ENV
          } else {
            echo "EXECUTABLE_PATH=$exePath" >> $env:GITHUB_ENV
          }
        } else {
          Write-Host "❌ Error: No se encontró el ejecutable compilado"
          exit 1
        }
        
    - name: Sign Executable (Optional)
      if: github.event.inputs.sign_executable == 'true'
      shell: pwsh
      working-directory: rustdesk-source
      run: |
        # Nota: Requiere configurar certificado en GitHub Secrets
        # Ejemplo de firma con signtool (requiere certificado)
        if ($env:CODE_SIGNING_CERT -and $env:CODE_SIGNING_PASSWORD) {
          Write-Host "=== Firmando ejecutable ==="
          # signtool sign /f cert.p12 /p $env:CODE_SIGNING_PASSWORD /t http://timestamp.digicert.com $env:EXECUTABLE_PATH
          Write-Host "✅ Ejecutable firmado correctamente"
        } else {
          Write-Host "⚠️ Certificado de firma no configurado, omitiendo firma"
        }
      env:
        CODE_SIGNING_CERT: ${{ secrets.CODE_SIGNING_CERT }}
        CODE_SIGNING_PASSWORD: ${{ secrets.CODE_SIGNING_PASSWORD }}
        
    - name: Create Installer (Optional)
      if: github.event.inputs.include_installer == 'true'
      shell: pwsh
      working-directory: rustdesk-source
      run: |
        Write-Host "=== Creando instalador MSI ==="
        
        # Instalar WiX Toolset
        choco install wixtoolset -y
        
        # Crear archivo WiX básico
        $wixContent = @"
<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <Product Id="*" Name="${{ github.event.inputs.executable_name }}" Language="1033" 
           Version="${{ github.event.inputs.version }}" Manufacturer="Custom RustDesk Client" 
           UpgradeCode="12345678-1234-1234-1234-123456789012">
    <Package InstallerVersion="200" Compressed="yes" InstallScope="perMachine" />
    
    <MajorUpgrade DowngradeErrorMessage="A newer version is already installed." />
    <MediaTemplate EmbedCab="yes" />
    
    <Feature Id="ProductFeature" Title="Main Application" Level="1">
      <ComponentGroupRef Id="ProductComponents" />
    </Feature>
  </Product>
  
  <Fragment>
    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="ProgramFilesFolder">
        <Directory Id="INSTALLFOLDER" Name="${{ github.event.inputs.executable_name }}" />
      </Directory>
    </Directory>
  </Fragment>
  
  <Fragment>
    <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
      <Component Id="MainExecutable" Guid="*">
        <File Id="ExecutableFile" Source="${{ env.EXECUTABLE_PATH }}" KeyPath="yes" />
      </Component>
    </ComponentGroup>
  </Fragment>
</Wix>
"@
        
        $wixContent | Out-File -FilePath "installer.wxs" -Encoding UTF8
        
        # Compilar instalador
        & "C:\Program Files (x86)\WiX Toolset v3.11\bin\candle.exe" installer.wxs
        & "C:\Program Files (x86)\WiX Toolset v3.11\bin\light.exe" installer.wixobj -out "${{ github.event.inputs.executable_name }}-installer.msi"
        
        if (Test-Path "${{ github.event.inputs.executable_name }}-installer.msi") {
          Write-Host "✅ Instalador MSI creado correctamente"
          echo "INSTALLER_PATH=${{ github.event.inputs.executable_name }}-installer.msi" >> $env:GITHUB_ENV
        } else {
          Write-Host "⚠️ Error al crear instalador MSI"
        }
        
    - name: Prepare Artifacts
      shell: pwsh
      working-directory: rustdesk-source
      run: |
        Write-Host "=== Preparando artefactos ==="
        
        # Crear directorio de distribución
        New-Item -ItemType Directory -Path "dist" -Force
        
        # Copiar ejecutable
        Copy-Item $env:EXECUTABLE_PATH "dist\"
        
        # Copiar configuración
        Copy-Item "..\config.json" "dist\config.json"
        
        # Copiar instalador si existe
        if ($env:INSTALLER_PATH -and (Test-Path $env:INSTALLER_PATH)) {
          Copy-Item $env:INSTALLER_PATH "dist\"
        }
        
        # Crear archivo README para el usuario
        $readmeContent = @"
# ${{ github.event.inputs.executable_name }} v${{ github.event.inputs.version }}

Cliente RustDesk personalizado generado automáticamente.

## Archivos incluidos:
- ${{ github.event.inputs.executable_name }}.exe: Ejecutable principal
- config.json: Configuración utilizada para el build

## Información del build:
- Versión: ${{ github.event.inputs.version }}
- Arquitectura: ${{ github.event.inputs.target_arch }}
- Rama RustDesk: ${{ github.event.inputs.rustdesk_branch }}
- Modo Portable: ${{ github.event.inputs.enable_portable }}
- Fecha de compilación: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC")

## Instrucciones:
1. Ejecuta directamente el archivo .exe para modo portable

Para soporte técnico, consulta la documentación del proyecto.
"@
        
        $readmeContent | Out-File -FilePath "dist\README.txt" -Encoding UTF8
        
        # Mostrar contenido del directorio
        Write-Host "Contenido del directorio dist:"
        Get-ChildItem "dist" | Format-Table Name, Length, LastWriteTime
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.inputs.executable_name }}-v${{ github.event.inputs.version }}-${{ github.event.inputs.target_arch }}
        path: rustdesk-source/dist/
        retention-days: 90
        
    - name: Create Release (Optional)
      if: github.event.inputs.version != '1.0.0'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: ${{ github.event.inputs.executable_name }} v${{ github.event.inputs.version }}
        body: |
          Cliente RustDesk personalizado v${{ github.event.inputs.version }}
          
          **Configuración del build:**
          - Ejecutable: ${{ github.event.inputs.executable_name }}
          - Arquitectura: ${{ github.event.inputs.target_arch }}
          - Rama RustDesk: ${{ github.event.inputs.rustdesk_branch }}
          - Modo Portable: ${{ github.event.inputs.enable_portable }}
          - Incluye Instalador: ${{ github.event.inputs.include_installer }}
          
          **Archivos incluidos:**
          - Ejecutable principal (.exe)
          - Configuración utilizada (config.json)
          - Documentación (README.txt)
          
          Descarga el archivo ZIP y extrae el contenido para usar el cliente personalizado.
        files: rustdesk-source/dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Summary
      shell: pwsh
      run: |
        Write-Host ""
        Write-Host "🎉 ==============================================="
        Write-Host "🎉 BUILD COMPLETADO EXITOSAMENTE"
        Write-Host "🎉 ==============================================="
        Write-Host ""
        Write-Host "📦 Ejecutable: ${{ github.event.inputs.executable_name }}.exe"
        Write-Host "📋 Versión: ${{ github.event.inputs.version }}"
        Write-Host "🏗️ Arquitectura: ${{ github.event.inputs.target_arch }}"
        Write-Host "🌿 Rama RustDesk: ${{ github.event.inputs.rustdesk_branch }}"
        Write-Host "💼 Modo Portable: ${{ github.event.inputs.enable_portable }}"
        Write-Host "📦 Instalador MSI: ${{ github.event.inputs.include_installer }}"
        Write-Host ""
        Write-Host "📁 Los artefactos están disponibles en la sección 'Actions' de este repositorio."
        Write-Host "⏰ Los archivos se mantendrán disponibles por 90 días."
        Write-Host ""
        Write-Host "✅ ¡Tu cliente RustDesk personalizado está listo para usar!"